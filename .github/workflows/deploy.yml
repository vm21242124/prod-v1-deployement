name: Build and Deploy to Docker Hub

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME_API_GATEWAY: ${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:api-gateway
  IMAGE_NAME_EUREKA: ${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:eureka-server
  IMAGE_NAME_USER_SERVICE: ${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:user-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Generate version tag
      id: version
      run: |
        # Get current date and time for versioning
        VERSION=$(date +'%Y.%m.%d-%H%M%S')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"

    - name: Build and push API Gateway
      uses: docker/build-push-action@v5
      with:
        context: ./apigateway
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:api-gateway-${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:api-gateway-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Eureka Server
      uses: docker/build-push-action@v5
      with:
        context: ./eureka
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:eureka-server-${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:eureka-server-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push User Service
      uses: docker/build-push-action@v5
      with:
        context: ./userService
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:user-service-${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:user-service-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update docker-compose with new image tags
      run: |
        # Create a backup of the original docker-compose.yml
        cp docker-compose.yml docker-compose.yml.backup
        
        # Update docker-compose.yml with new image tags
        sed -i "s|build: .|image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:api-gateway-${{ steps.version.outputs.version }}|g" docker-compose.yml
        sed -i "s|build: ../eureka|image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:eureka-server-${{ steps.version.outputs.version }}|g" docker-compose.yml
        sed -i "s|build: ../userService|image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:user-service-${{ steps.version.outputs.version }}|g" docker-compose.yml
        
        echo "Updated docker-compose.yml with new image tags"

    # - name: Commit and push updated docker-compose
    #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    #   run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add docker-compose.yml
    #     git commit -m "Update docker-compose.yml with version ${{ steps.version.outputs.version }}" || echo "No changes to commit"
    #     git push

    # - name: Create Release
    #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: v${{ steps.version.outputs.version }}
    #     release_name: Release v${{ steps.version.outputs.version }}
    #     body: |
    #       ## Docker Images Released
          
    #       **Version:** ${{ steps.version.outputs.version }}
          
    #                  ### Images:
    #        - **API Gateway:** `${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:api-gateway-${{ steps.version.outputs.version }}`
    #        - **Eureka Server:** `${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:eureka-server-${{ steps.version.outputs.version }}`
    #        - **User Service:** `${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:user-service-${{ steps.version.outputs.version }}`
          
    #       ### Usage:
    #       ```bash
    #       docker-compose pull
    #       docker-compose up -d
    #       ```
    #     draft: false
    #     prerelease: false

    # - name: Output version info
    #   run: |
    #     echo "üöÄ Deployment completed successfully!"
    #     echo "üì¶ Version: ${{ steps.version.outputs.version }}"
    #     echo "üê≥ Images pushed to Docker Hub:"
    #     echo "   - ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:api-gateway-${{ steps.version.outputs.version }}"
    #     echo "   - ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:eureka-server-${{ steps.version.outputs.version }}"
    #     echo "   - ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/prod-v1-deployement:user-service-${{ steps.version.outputs.version }}"
